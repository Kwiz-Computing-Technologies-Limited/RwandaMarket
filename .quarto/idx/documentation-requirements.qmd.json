{"title":"Documentation Requirements","markdown":{"yaml":{"title":"Documentation Requirements"},"headingText":"B2C Documentation","containsRefs":false,"markdown":"\n\nTo facilitate our business operations, we require the following documentation from our partners, suppliers, and customers:\n\n\n1. Customer Registration Form\n   - Full Name\n   - Email Address\n   - Phone Number\n   - Shipping Address\n   - Preferred Payment Method\n\n2. Product Review Form\n   - Product Name\n   - Rating (1-5 stars)\n   - Written Review\n   - Images (optional)\n\n## B2B Documentation\n\n1. Business Partner Registration Form\n   - Company Name\n   - Business Registration Number\n   - Contact Person Name\n   - Contact Email\n   - Contact Phone\n   - Business Address\n   - Type of Partnership (Supplier, Distributor, etc.)\n\n2. Supplier Information Form\n   - Company Name\n   - Product Categories Supplied\n   - Production Capacity\n   - Quality Certifications\n   - Bank Account Details for Payments\n\n3. Export Documentation Form\n   - Product Details\n   - Country of Origin\n   - HS Code\n   - Certificate of Origin\n   - Phytosanitary Certificate (for agricultural products)\n   - Value of Goods\n\n4. Import Documentation Form\n   - Importer Details\n   - Product Details\n   - Customs Declaration\n   - Import Permit Number\n   - Bill of Lading / Airway Bill Number\n\n5. Trade Facilitation Service Request Form\n   - Service Type (Customs Clearance, Logistics, etc.)\n   - Shipment Details\n   - Required Documentation Checklist\n\nNow, let's create the forms to collect this information. We'll use the `shiny` library to create interactive forms that can be embedded in our Quarto website.\n\n```{r}\n#| echo: false\nlibrary(shiny)\n\n# Customer Registration Form\ncustomer_registration_form <- fluidPage(\n  textInput(\"full_name\", \"Full Name\"),\n  textInput(\"email\", \"Email Address\"),\n  textInput(\"phone\", \"Phone Number\"),\n  textAreaInput(\"shipping_address\", \"Shipping Address\"),\n  selectInput(\"payment_method\", \"Preferred Payment Method\",\n              choices = c(\"Credit Card\", \"M-Pesa\", \"Bank Transfer\"))\n)\n\n# Business Partner Registration Form\nbusiness_partner_form <- fluidPage(\n  textInput(\"company_name\", \"Company Name\"),\n  textInput(\"business_reg_num\", \"Business Registration Number\"),\n  textInput(\"contact_person\", \"Contact Person Name\"),\n  textInput(\"contact_email\", \"Contact Email\"),\n  textInput(\"contact_phone\", \"Contact Phone\"),\n  textAreaInput(\"business_address\", \"Business Address\"),\n  selectInput(\"partnership_type\", \"Type of Partnership\",\n              choices = c(\"Supplier\", \"Distributor\", \"Logistics Partner\", \"Other\"))\n)\n\n# Display the forms (in a real application, these would be on separate pages)\nfluidPage(\n  h2(\"Customer Registration Form\"),\n  customer_registration_form,\n  hr(),\n  h2(\"Business Partner Registration Form\"),\n  business_partner_form\n)\n```\n\nNow, let's set up a MongoDB database on AWS and create a script to interact with it. We'll use the `paws` library to interact with AWS and the `mongolite` library to interact with MongoDB.\n\n```{r}\n#| eval: false\n#| echo: false\nlibrary(paws)\nlibrary(mongolite)\n\n# AWS setup\naws_access_key_id <- \"YOUR_AWS_ACCESS_KEY_ID\"\naws_secret_access_key <- \"YOUR_AWS_SECRET_ACCESS_KEY\"\nregion <- \"us-east-1\"  # or your preferred region\n\n# Initialize AWS DocumentDB (MongoDB-compatible) client\ndocdb <- paws::docdb(\n  config = list(\n    credentials = list(\n      creds = list(\n        access_key_id = aws_access_key_id,\n        secret_access_key = aws_secret_access_key\n      )\n    ),\n    region = region\n  )\n)\n\n# Create a DocumentDB cluster\ncluster_response <- docdb$create_db_cluster(\n  DBClusterIdentifier = \"rwandamarket-cluster\",\n  Engine = \"docdb\",\n  MasterUsername = \"admin\",\n  MasterUserPassword = \"YOUR_SECURE_PASSWORD\",\n  DBSubnetGroupName = \"YOUR_SUBNET_GROUP\",\n  VpcSecurityGroupIds = c(\"YOUR_SECURITY_GROUP_ID\")\n)\n\n# Wait for the cluster to be available\nwaiter <- docdb$get_waiter(\"db_cluster_available\")\nwaiter$wait(DBClusterIdentifier = \"rwandamarket-cluster\")\n\n# Get cluster endpoint\ncluster_info <- docdb$describe_db_clusters(DBClusterIdentifier = \"rwandamarket-cluster\")\nendpoint <- cluster_info$DBClusters[[1]]$Endpoint\n\n# Connect to MongoDB using mongolite\nconnection_string <- sprintf(\n  \"mongodb://%s:%s@%s:27017/rwandamarket?ssl=true&replicaSet=rs0&readPreference=secondaryPreferred\",\n  \"admin\",\n  \"YOUR_SECURE_PASSWORD\",\n  endpoint\n)\n\n# Create collections\ncustomers <- mongo(collection = \"customers\", db = \"rwandamarket\", url = connection_string)\nbusiness_partners <- mongo(collection = \"business_partners\", db = \"rwandamarket\", url = connection_string)\nproducts <- mongo(collection = \"products\", db = \"rwandamarket\", url = connection_string)\norders <- mongo(collection = \"orders\", db = \"rwandamarket\", url = connection_string)\n\n# Example: Insert a customer record\ncustomers$insert(\n  data.frame(\n    full_name = \"John Doe\",\n    email = \"john.doe@example.com\",\n    phone = \"+254123456789\",\n    shipping_address = \"123 Nairobi St, Kenya\",\n    payment_method = \"M-Pesa\"\n  )\n)\n\n# Example: Query customers\nresult <- customers$find('{\"payment_method\": \"M-Pesa\"}')\nprint(result)\n\n# Remember to close the connections when done\ncustomers$disconnect()\nbusiness_partners$disconnect()\nproducts$disconnect()\norders$disconnect()\n```\n\nThis script does the following:\n\n1. Sets up AWS credentials and initializes the DocumentDB client.\n2. Creates a DocumentDB cluster (which is MongoDB-compatible).\n3. Waits for the cluster to be available and retrieves its endpoint.\n4. Connects to the MongoDB database using the `mongolite` library.\n5. Creates collections for customers, business partners, products, and orders.\n6. Demonstrates how to insert a record and query the database.\n\nTo use this in production:\n\n1. Replace `YOUR_AWS_ACCESS_KEY_ID`, `YOUR_AWS_SECRET_ACCESS_KEY`, `YOUR_SECURE_PASSWORD`, `YOUR_SUBNET_GROUP`, and `YOUR_SECURITY_GROUP_ID` with your actual AWS and network configuration details.\n2. Ensure that your AWS security group allows incoming connections on port 27017 from your application servers.\n3. Implement proper security measures, such as storing credentials securely and not in the code.\n4. Set up error handling and connection pooling for robustness.\n5. Implement functions to handle form submissions and database operations for each type of document we're collecting.\n\nTo integrate this with the Quarto website:\n\n1. Create API endpoints (e.g., using Plumber in R) that accept form submissions and interact with the database.\n2. Modify the Shiny forms to submit to these API endpoints.\n3. Implement proper validation and error handling on both client and server sides.\n\nThis setup provides a scalable and flexible system for collecting and storing the various documents required for RwandaMarket's operations. The use of MongoDB allows for easy storage of complex, nested documents, which is particularly useful for things like product catalogs and order information.\n\n\n","srcMarkdownNoYaml":"\n\nTo facilitate our business operations, we require the following documentation from our partners, suppliers, and customers:\n\n## B2C Documentation\n\n1. Customer Registration Form\n   - Full Name\n   - Email Address\n   - Phone Number\n   - Shipping Address\n   - Preferred Payment Method\n\n2. Product Review Form\n   - Product Name\n   - Rating (1-5 stars)\n   - Written Review\n   - Images (optional)\n\n## B2B Documentation\n\n1. Business Partner Registration Form\n   - Company Name\n   - Business Registration Number\n   - Contact Person Name\n   - Contact Email\n   - Contact Phone\n   - Business Address\n   - Type of Partnership (Supplier, Distributor, etc.)\n\n2. Supplier Information Form\n   - Company Name\n   - Product Categories Supplied\n   - Production Capacity\n   - Quality Certifications\n   - Bank Account Details for Payments\n\n3. Export Documentation Form\n   - Product Details\n   - Country of Origin\n   - HS Code\n   - Certificate of Origin\n   - Phytosanitary Certificate (for agricultural products)\n   - Value of Goods\n\n4. Import Documentation Form\n   - Importer Details\n   - Product Details\n   - Customs Declaration\n   - Import Permit Number\n   - Bill of Lading / Airway Bill Number\n\n5. Trade Facilitation Service Request Form\n   - Service Type (Customs Clearance, Logistics, etc.)\n   - Shipment Details\n   - Required Documentation Checklist\n\nNow, let's create the forms to collect this information. We'll use the `shiny` library to create interactive forms that can be embedded in our Quarto website.\n\n```{r}\n#| echo: false\nlibrary(shiny)\n\n# Customer Registration Form\ncustomer_registration_form <- fluidPage(\n  textInput(\"full_name\", \"Full Name\"),\n  textInput(\"email\", \"Email Address\"),\n  textInput(\"phone\", \"Phone Number\"),\n  textAreaInput(\"shipping_address\", \"Shipping Address\"),\n  selectInput(\"payment_method\", \"Preferred Payment Method\",\n              choices = c(\"Credit Card\", \"M-Pesa\", \"Bank Transfer\"))\n)\n\n# Business Partner Registration Form\nbusiness_partner_form <- fluidPage(\n  textInput(\"company_name\", \"Company Name\"),\n  textInput(\"business_reg_num\", \"Business Registration Number\"),\n  textInput(\"contact_person\", \"Contact Person Name\"),\n  textInput(\"contact_email\", \"Contact Email\"),\n  textInput(\"contact_phone\", \"Contact Phone\"),\n  textAreaInput(\"business_address\", \"Business Address\"),\n  selectInput(\"partnership_type\", \"Type of Partnership\",\n              choices = c(\"Supplier\", \"Distributor\", \"Logistics Partner\", \"Other\"))\n)\n\n# Display the forms (in a real application, these would be on separate pages)\nfluidPage(\n  h2(\"Customer Registration Form\"),\n  customer_registration_form,\n  hr(),\n  h2(\"Business Partner Registration Form\"),\n  business_partner_form\n)\n```\n\nNow, let's set up a MongoDB database on AWS and create a script to interact with it. We'll use the `paws` library to interact with AWS and the `mongolite` library to interact with MongoDB.\n\n```{r}\n#| eval: false\n#| echo: false\nlibrary(paws)\nlibrary(mongolite)\n\n# AWS setup\naws_access_key_id <- \"YOUR_AWS_ACCESS_KEY_ID\"\naws_secret_access_key <- \"YOUR_AWS_SECRET_ACCESS_KEY\"\nregion <- \"us-east-1\"  # or your preferred region\n\n# Initialize AWS DocumentDB (MongoDB-compatible) client\ndocdb <- paws::docdb(\n  config = list(\n    credentials = list(\n      creds = list(\n        access_key_id = aws_access_key_id,\n        secret_access_key = aws_secret_access_key\n      )\n    ),\n    region = region\n  )\n)\n\n# Create a DocumentDB cluster\ncluster_response <- docdb$create_db_cluster(\n  DBClusterIdentifier = \"rwandamarket-cluster\",\n  Engine = \"docdb\",\n  MasterUsername = \"admin\",\n  MasterUserPassword = \"YOUR_SECURE_PASSWORD\",\n  DBSubnetGroupName = \"YOUR_SUBNET_GROUP\",\n  VpcSecurityGroupIds = c(\"YOUR_SECURITY_GROUP_ID\")\n)\n\n# Wait for the cluster to be available\nwaiter <- docdb$get_waiter(\"db_cluster_available\")\nwaiter$wait(DBClusterIdentifier = \"rwandamarket-cluster\")\n\n# Get cluster endpoint\ncluster_info <- docdb$describe_db_clusters(DBClusterIdentifier = \"rwandamarket-cluster\")\nendpoint <- cluster_info$DBClusters[[1]]$Endpoint\n\n# Connect to MongoDB using mongolite\nconnection_string <- sprintf(\n  \"mongodb://%s:%s@%s:27017/rwandamarket?ssl=true&replicaSet=rs0&readPreference=secondaryPreferred\",\n  \"admin\",\n  \"YOUR_SECURE_PASSWORD\",\n  endpoint\n)\n\n# Create collections\ncustomers <- mongo(collection = \"customers\", db = \"rwandamarket\", url = connection_string)\nbusiness_partners <- mongo(collection = \"business_partners\", db = \"rwandamarket\", url = connection_string)\nproducts <- mongo(collection = \"products\", db = \"rwandamarket\", url = connection_string)\norders <- mongo(collection = \"orders\", db = \"rwandamarket\", url = connection_string)\n\n# Example: Insert a customer record\ncustomers$insert(\n  data.frame(\n    full_name = \"John Doe\",\n    email = \"john.doe@example.com\",\n    phone = \"+254123456789\",\n    shipping_address = \"123 Nairobi St, Kenya\",\n    payment_method = \"M-Pesa\"\n  )\n)\n\n# Example: Query customers\nresult <- customers$find('{\"payment_method\": \"M-Pesa\"}')\nprint(result)\n\n# Remember to close the connections when done\ncustomers$disconnect()\nbusiness_partners$disconnect()\nproducts$disconnect()\norders$disconnect()\n```\n\nThis script does the following:\n\n1. Sets up AWS credentials and initializes the DocumentDB client.\n2. Creates a DocumentDB cluster (which is MongoDB-compatible).\n3. Waits for the cluster to be available and retrieves its endpoint.\n4. Connects to the MongoDB database using the `mongolite` library.\n5. Creates collections for customers, business partners, products, and orders.\n6. Demonstrates how to insert a record and query the database.\n\nTo use this in production:\n\n1. Replace `YOUR_AWS_ACCESS_KEY_ID`, `YOUR_AWS_SECRET_ACCESS_KEY`, `YOUR_SECURE_PASSWORD`, `YOUR_SUBNET_GROUP`, and `YOUR_SECURITY_GROUP_ID` with your actual AWS and network configuration details.\n2. Ensure that your AWS security group allows incoming connections on port 27017 from your application servers.\n3. Implement proper security measures, such as storing credentials securely and not in the code.\n4. Set up error handling and connection pooling for robustness.\n5. Implement functions to handle form submissions and database operations for each type of document we're collecting.\n\nTo integrate this with the Quarto website:\n\n1. Create API endpoints (e.g., using Plumber in R) that accept form submissions and interact with the database.\n2. Modify the Shiny forms to submit to these API endpoints.\n3. Implement proper validation and error handling on both client and server sides.\n\nThis setup provides a scalable and flexible system for collecting and storing the various documents required for RwandaMarket's operations. The use of MongoDB allows for easy storage of complex, nested documents, which is particularly useful for things like product catalogs and order information.\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"include-in-header":{"text":"<style>\n.toc-title {\n  color: #FFF !important;\n}\n</style>\n"},"output-file":"documentation-requirements.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","page-layout":"full","theme":"cosmo","title":"Documentation Requirements"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}