---
title: "Species Occurrence in the US"
format: 
  html:
    code-fold: true
    code-summary: "Show the code"
    resources: 
      - shinylive-sw.js
filters:
  - shinylive
---

## Introduction

This document showcases the distribution of various species across the United States. Use the interactive elements below to explore the data.

## Leaflet Map

Select a species to view its distribution on the map:

```{shinylive-r}
#| standalone: true
#| viewerHeight: 100
library(shiny)

selectInput("species_leaflet", "Select Species for Leaflet:", 
            choices = c("Species A", "Species B", "Species C"))
```

The map below will update based on your selection:

```{shinylive-r}
#| standalone: true
#| viewerHeight: 400
library(shiny)
library(leaflet)

# Sample data (replace with your actual data)
species_data <- data.frame(
  species = c("Species A", "Species B", "Species C"),
  lat = c(37.7749, 40.7128, 34.0522),
  lon = c(-122.4194, -74.0060, -118.2437),
  count = c(50, 30, 40)
)

leafletOutput("leaflet_map")

server <- function(input, output, session) {
  output$leaflet_map <- renderLeaflet({
    filtered_data <- species_data[species_data$species == input$species_leaflet, ]
    
    leaflet() %>%
      addTiles() %>%
      addMarkers(
        data = filtered_data,
        ~lon, ~lat,
        popup = ~paste(species, ": ", count)
      )
  })
}
```

## Plotly Map

Now, let's look at another visualization using Plotly. Select a species:

```{shinylive-r}
#| standalone: true
#| viewerHeight: 100
library(shiny)

selectInput("species_plotly", "Select Species for Plotly:", 
            choices = c("Species A", "Species B", "Species C"))
```

The Plotly map will update based on your selection:

```{shinylive-r}
#| standalone: true
#| viewerHeight: 400
library(shiny)
library(plotly)

# Sample data (replace with your actual data)
species_data <- data.frame(
  species = c("Species A", "Species B", "Species C"),
  lat = c(37.7749, 40.7128, 34.0522),
  lon = c(-122.4194, -74.0060, -118.2437),
  count = c(50, 30, 40)
)

plotlyOutput("plotly_map")

server <- function(input, output, session) {
  output$plotly_map <- renderPlotly({
    filtered_data <- species_data[species_data$species == input$species_plotly, ]
    
    plot_ly(
      data = filtered_data,
      type = 'scattergeo',
      lon = ~lon,
      lat = ~lat,
      text = ~paste(species, ": ", count),
      marker = list(size = 10)
    ) %>%
      layout(
        geo = list(
          scope = 'usa',
          projection = list(type = 'albers usa'),
          showland = TRUE,
          landcolor = toRGB("gray95"),
          countrycolor = toRGB("gray80")
        )
      )
  })
}
```

## Historical Data

Use the slider below to select a year and see how the data changes:

```{shinylive-r}
#| standalone: true
#| viewerHeight: 100
library(shiny)

sliderInput("year", "Select Year:", min = 2020, max = 2023, value = 2023)
```

The text below will update based on your selection:

```{shinylive-r}
#| standalone: true
#| viewerHeight: 100
library(shiny)

# Sample data (replace with your actual data)
species_data <- data.frame(
  species = c("Species A", "Species B", "Species C"),
  count = c(50, 30, 40)
)

textOutput("dynamic_text")

server <- function(input, output, session) {
  output$dynamic_text <- renderText({
    paste("You selected the year", input$year, ". In this year, we observed",
          sum(species_data$count), "occurrences across all species.")
  })
}
```

## Conclusion

This interactive document demonstrates the power of combining Quarto with Shinylive to create engaging, browser-based data visualizations. The distributed layout allows for a more narrative-driven approach to data exploration.
